
@model PerfilViewModel

@{
    ViewData["Title"] = "Wavez | Perfil de usuario";
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<script>
    $(document).ready(function () {
        $(document).on('click', '.seguir-btn', function () {
            var boton = $(this);
            var usuarioId = boton.data('id');

            $.ajax({
                url: '@Url.Action("Seguir", "Usuario")',
                type: 'POST',
                data: { id: usuarioId },
                success: function (response) {
                    if (response.success) {
                        if (response.action === "follow") {
                            boton.text("Dejar de Seguir").removeClass("btn-primary").addClass("btn-secondary");
                        } else if (response.action === "unfollow") {
                            boton.text("Seguir").removeClass("btn-secondary").addClass("btn-primary");
                        }
                        alert(response.message);
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function () {
                    alert("Ha ocurrido un error. Por favor, intenta de nuevo.");
                }
            });
        });
    });



</script>


<div class="text-center">
    <h1 class="display-4">Perfil</h1>

    <!-- Mostrar datos del usuario -->
    <!-- Mostrar datos del usuario -->
    <img src="@Model.Usuario.FotoPerfil" alt="Foto de perfil" class="card-img-top" />
    <h5 class="card-title">@Html.DisplayFor(modelItem => Model.Usuario.FotoPerfil)</h5>
    <h5 class="card-title">@Html.DisplayFor(modelItem => Model.Usuario.Usuario)</h5>
    <h5 class="card-title">@Html.DisplayFor(modelItem => Model.Usuario.Nombre)</h5>
    <h5 class="card-title">@Html.DisplayFor(modelItem => Model.Usuario.Email)</h5> 

    <div class="resultados">
        @if (Model.EsPerfilPropio)
        {
            @* <form action="@Url.Action("Edit", "Usuario")" method="post">
                <input type="hidden" name="id" value="@Model.Usuario.Usuario" />
                <button type="submit" class="btn btn-primary">Editar perfil</button>
            </form> *@

            <form action="@Url.Action("Edit", "Usuario", new { id = Model.Usuario.Usuario })" method="get">
                <button type="submit" class="btn btn-primary">Editar perfil</button>
            </form>


            <form action="@Url.Action("Logout", "Usuario")" method="post">
                <button type="submit" class="btn btn-danger">Cerrar sesión</button>
            </form>
        }
    </div>

    <div id="boton-seguir">
        @if (!Model.EsPerfilPropio)
        {
            @if (Model.Usuario.EsSeguidoPorUsuarioActual)
            {
                <button class="seguir-btn btn btn-secondary" data-id="@Model.Usuario.Usuario">Dejar de Seguir</button>

            }
            else
            {
                <button class="seguir-btn btn btn-primary" data-id="@Model.Usuario.Usuario">Seguir</button>
            }
        }
    </div>

    




    <div class="resultados">

        <!-- Mostrar canciones -->
        <h3>Canciones</h3>

        @if (Model.EsPerfilPropio)
        {
            <form action="@Url.Action("Create", "Cancion")" method="get">
                <button type="submit" class="btn btn-primary">Añadir canción</button>
            </form>
        }

        <div class="estanteria-canciones">
            @if (!Model.Canciones.Any())
            {
                <p>Aún no has subido ninguna canción.</p>
            }
            else
            {
                @foreach (var item in Model.Canciones)
                {
                    <div class="card">
                        <img class="card-img-top" src="@item.FotoPortada" style="width:200px; height:200px" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title">@Html.DisplayFor(modelItem => item.Titulo)</h5>
                            <h5 class="card-title">@Html.DisplayFor(modelItem => item.Id)</h5>
                            <p class="card-text"><strong>Género:</strong> @Html.DisplayFor(modelItem => item.Genero)</p>
                            <p class="card-text"><strong>Autor:</strong> @Html.DisplayFor(modelItem => item.Autor)</p>
                            <p class="card-text"><strong>Fecha de Lanzamiento:</strong> @Html.DisplayFor(modelItem => item.Fecha)</p>
                            <p class="card-text"><strong>Reproducciones:</strong> @Html.DisplayFor(modelItem => item.numReproducciones)</p>
                        </div>
                        @if (Model.EsPerfilPropio)
                        {
                            <form action="@Url.Action("Delete", "Cancion", new { id = item.Id })" method="get">
                                <button type="submit" class="btn btn-primary">Eliminar</button>
                            </form>
                        }
                    </div>

              
                }
            }
        </div>

        <!-- Mostrar playlists -->
        <h3>Playlists</h3>

        @if (Model.EsPerfilPropio)
        {
            <form action="@Url.Action("Editar", "Usuario")" method="post">
                <button type="submit" class="btn btn-primary">Añadir playlist</button>
            </form>
        }

        <div class="estanteria-playlists">
            @if (!Model.Playlists.Any())
            {
                <p>Aún no tienes ninguna playlist.</p>
            }
            else
            {
                @foreach (var item in Model.Playlists)
                {
                    <div class="card">
                        <a asp-controller="Playlist" asp-action="Details" asp-route-id="@item.Id">
                            <img class="card-img-top" src="@(!string.IsNullOrEmpty(item.FotoPortada) ? item.FotoPortada : Url.Content("https://community.spotify.com/t5/image/serverpage/image-id/25294i2836BD1C1A31BDF2?v=v2"))" style="width:200px; height:200px" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Titulo)</h5>
                            </div>
                        </a>
                        @if (Model.EsPerfilPropio)
                        {
                            <form action="@Url.Action("Delete", "Playlist", new { id = item.Id })" method="post">
                                <button type="submit" class="btn btn-primary">Eliminar</button>
                            </form>
                        }
                    </div>
                }
            }
        </div>

        <!-- Mostrar usuarios -->
        <h3>Seguidores</h3>
        <div class="estanteria-usuarios">
            @if (!Model.Seguidores.Any())
            {
                <p>Aún no hay ningún seguidor.</p>
            }
            else
            {
                @foreach (var item in Model.Seguidores)
                {
                    <a class="nav-link text-dark" asp-area="" asp-controller="Usuario" asp-action="Perfil" asp-route-id="@item.Usuario">
                        <div class="card" style="margin: 10px; display: inline-block;">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Nombre)</h5>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>

        <h3>Seguidos</h3>
        <div class="estanteria-usuarios">
            @if (!Model.Seguidos.Any())
            {
                <p>Aún no hay ningún seguido.</p>
            }
            else
            {
                @foreach (var item in Model.Seguidos)
                {
                    <a class="nav-link text-dark" asp-area="" asp-controller="Usuario" asp-action="Perfil" asp-route-id="@item.Usuario">
                        <div class="card" style="margin: 10px; display: inline-block;">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Nombre)</h5>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>

        

    </div>
</div>


@section Scripts {
    <script>
            let songQueue = [];
                let isPlaying = false;

                // Obtener elementos clave
                const audioPlayer = document.getElementById('audioPlayer');
                const albumArt = document.getElementById('albumArt');
                const trackTitle = document.getElementById('trackTitle');
                const trackArtist = document.getElementById('trackArtist');
                const playPauseButton = document.getElementById('playPauseButton');
                const progress = document.getElementById('progress');
                const currentTimeEl = document.getElementById('currentTime');
                const durationEl = document.getElementById('duration');

                // Actualizar información del tiempo
                function formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
                    return `${minutes}:${secs}`;
                }

                function updateProgress() {
                    const currentTime = audioPlayer.currentTime;
                    const duration = audioPlayer.duration;

                    progress.value = (currentTime / duration) * 100 || 0;
                    currentTimeEl.textContent = formatTime(currentTime);
                    durationEl.textContent = formatTime(duration);

                    const value = progress.value;
                    const max = progress.max;
                    const percentage = (value / max) * 100;
                    progress.style.setProperty('--progress', `${percentage}%`);
                }

                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('loadedmetadata', () => {

                    const value = progress.value;
                    const max = progress.max;
                    const percentage = (value / max) * 100;
                    progress.style.setProperty('--progress', `${percentage}%`);
                    durationEl.textContent = formatTime(audioPlayer.duration);
                });
                // Cambiar el progreso manualmente
                progress.addEventListener('input', () => {
                    const seekTime = (progress.value / 100) * audioPlayer.duration;
                    audioPlayer.currentTime = seekTime;
                });

                // Pausar/Reanudar reproducción
                playPauseButton.addEventListener('click', () => {
                    if (isPlaying) {
                        audioPlayer.pause();
                        playPauseButton.innerHTML = `<i class="bi bi-play-fill"></i>`;
                        sessionStorage.setItem('isPlaying', 'false');
                    } else {
                        audioPlayer.play();
                        playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                        sessionStorage.setItem('isPlaying', 'true');
                    }
                    isPlaying = !isPlaying;
                });

                // Reproducir la siguiente canción de la cola
                function playNextInQueue() {
                    if (songQueue.length > 0) {
                        const nextSong = songQueue.shift();
                        sessionStorage.setItem('songQueue', JSON.stringify(songQueue)); // Actualizar cola en SessionStorage
                        playSong(nextSong);
                    } else {
                        console.log('La cola está vacía.');
                        isPlaying = false;
                    }
                }
                    // Recuperar cola y canción actual al cargar la página
                    window.addEventListener('load', () => {
                        const storedQueue = sessionStorage.getItem('songQueue');
                        if (storedQueue) {
                            songQueue = JSON.parse(storedQueue);
                            console.log('Cola recuperada:', songQueue);
                        }

                        const currentSong = sessionStorage.getItem('currentSong');
                        if (currentSong) {
                            playSong(JSON.parse(currentSong));
                        }

                        // Restaurar tiempo de la canción
                        const storedTime = sessionStorage.getItem('currentTime');
                        if (storedTime) {
                            audioPlayer.currentTime = parseFloat(storedTime);
                        }

                        // Restaurar estado de reproducción
                        const storedIsPlaying = sessionStorage.getItem('isPlaying');
                        if (storedIsPlaying === 'true') {
                            audioPlayer.play();
                            playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                            isPlaying = true;
                        } else {
                            audioPlayer.pause();
                            playPauseButton.innerHTML = `<i class="bi bi-play-fill"></i>`;
                            isPlaying = false;
                        }
                    });

                    // Guardar tiempo de la canción al salir de la página
                    window.addEventListener('beforeunload', () => {
                        const currentTime = audioPlayer.currentTime;
                        sessionStorage.setItem('currentTime', currentTime);
                    });

                    // Evento cuando una canción termina
                    audioPlayer.addEventListener('ended', () => {
                        console.log('Canción terminada.');
                        playNextInQueue();
                    });

                    // Función para reproducir una canción
            async function playSong(song) {
                console.log("Reproduciendo " + JSON.stringify(song))
                if (!song || !song.url) return;
                audioPlayer.src = song.url;
                audioPlayer.load();
                audioPlayer.play();
                playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                isPlaying = true;


                const value = progress.value;
                const max = progress.max;
                const percentage = (value / max) * 100;
                progress.style.setProperty('--progress', `${percentage}%`);


                // Actualizar información de la canción
                albumArt.src = song.albumArt || 'https://via.placeholder.com/100';
                trackTitle.textContent = song.title || 'Título desconocido';
                trackArtist.textContent = song.artist || 'Artista desconocido';

                sessionStorage.setItem('currentSong', JSON.stringify(song));
                console.log(`Reproduciendo canción: ${song.title}`);

                // Llamar a la API para aumentar reproducciones
                if (song.id) {
                    try {
                        const response = await fetch('/Cancion/AumentarReproducciones', {
                            method: 'POST',
                            body: new URLSearchParams({ 'id': song.id })
                        });

                        const data = await response.json();
                        if (data.success) {
                            console.log("Reproducción aumentada exitosamente.");
                        } else {
                            console.log("Error al aumentar las reproducciones.");
                        }
                    } catch (error) {
                        console.error("Error en la llamada a la API:", error);
                    }
                }
            }
        document.addEventListener("mousemove", (e) => {
            const circle = document.getElementById("mouse-circle");
            circle.style.transform = `translate(${e.pageX - 50}px, ${e.pageY - 50}px)`;
        });
    </script>
}