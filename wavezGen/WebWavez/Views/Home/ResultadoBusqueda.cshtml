@model ResultadoBusquedaViewModel

@{
    ViewData["Title"] = "Wavez | Resultados de Búsqueda";
}

<div class="text-center">
    <h1 class="display-4">Búsqueda</h1>

    <form asp-action="ResultadoBusqueda" method="get" class="search-bar">
        <input type="text" name="query" placeholder="Buscar..." value="@Context.Request.Query["query"]"/>
        <a href="#" class="toggle-buscar-avanzado">Filtros</a>
        <div class="buscar-avanzado" style="display: none;">
            <div>
                <input type="checkbox" name="filter" value="canciones" @(Model.Filtros.Contains("canciones") ? "checked" : "") /> Canciones
                <input type="checkbox" name="filter" value="playlists" @(Model.Filtros.Contains("playlists") ? "checked" : "") /> Playlists
                <input type="checkbox" name="filter" value="usuarios" @(Model.Filtros.Contains("usuarios") ? "checked" : "") /> Usuarios
            </div>
            <div>
                <select name="genre" id="genre-selector" onchange="toggleFilters(this)">
                    <option value="">Seleccione un género</option>
                    @foreach (var genre in Model.Generos)
                    {
                        <option value="@genre">@genre</option>
                    }
                </select>
            </div>
        </div>
        <button class="button" type="submit">Buscar</button>
    </form>

    <div class="resultados">
        <h2>Resultados de: @Context.Request.Query["query"]</h2>

        <!-- Mostrar canciones -->
        @if (Model.Filtros.Contains("canciones"))
        {
            <h3>Canciones</h3>
            <div class="grid-canciones centered-grid">
                @if (!Model.Canciones.Any())
                {
                    <p>No hay canciones que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Canciones)
                    {
                        <div class="card">
                            <a asp-controller="Cancion" asp-action="Details" asp-route-id="@item.Id" data-id="@item.Id">
                                <img class="card-img-top" src="@item.FotoPortada" style="width:200px; height:200px" alt="Card image cap">
                            </a>
                            <div class="card-body">
                                <a asp-controller="Cancion" asp-action="Details" asp-route-id="@item.Id" data-id="@item.Id">
                                    <h5 class="card-title"><strong>@Html.DisplayFor(modelItem => item.Titulo)</strong></h5>
                                </a>
                                <a asp-controller="Usuario" asp-action="Perfil" asp-route-id="@item.Autor" data-id="@item.Id">
                                    <p class="card-text">@Html.DisplayFor(modelItem => item.AutorDisplay)</p>
                                </a>
                                <p class="card-text"><strong>Género:</strong> @Html.DisplayFor(modelItem => item.Genero)</p>
                                <p class="card-text"><strong>Fecha de Lanzamiento:</strong> @Html.DisplayFor(modelItem => item.Fecha)</p>
                                <p class="card-text"><strong>Reproducciones:</strong> @Html.DisplayFor(modelItem => item.numReproducciones)</p>
                            </div>
                            <a href="#" class="play-button" data-id="@item.Id">
                                <i class="bi bi-play-fill"></i>
                            </a>
                            <button class="menu-desplegable"><i class="bi bi-three-dots-vertical"></i></button>
                            <div class="desplegado">
                                <a class="btn queue-button" data-id="@item.Id">Agregar a Cola</a>
                                <a class="btn" onclick="addtoPlaylist(event)">Agregar a Playlist</a>
                                <p class="card-text" style="display:none;" data-song-id="@item.Id">@Html.DisplayFor(modelItem => item.Id)</p>
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <!-- Mostrar playlists -->
        @if (Model.Filtros.Contains("playlists"))
        {
            <h3>Playlists</h3>
            <div class="grid-canciones centered-grid">
                @if (!Model.Playlists.Any())
                {
                    <p>No hay playlists que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Playlists)
                    {
                        <div class="card">
                            <a asp-controller="Playlist" asp-action="Details" asp-route-id="@item.Id" data-id="@item.Id">
                                <img class="card-img-top" src="@item.FotoPortada" style="width:200px; height:200px" alt="Card image cap">
                            </a>
                            <div class="card-body">
                                <a asp-controller="Playlist" asp-action="Details" asp-route-id="@item.Id" data-id="@item.Id">
                                    <h5 class="card-title"><strong>@Html.DisplayFor(modelItem => item.Titulo)</strong></h5>
                                </a>
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <!-- Mostrar usuarios -->
        @if (Model.Filtros.Contains("usuarios"))
        {
            <h3>Usuarios</h3>
            <div class="grid-canciones centered-grid">
                @if (!Model.Usuarios.Any())
                {
                    <p>No hay usuarios que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Usuarios)
                    {
                        <a class="nav-link text-dark" asp-area="" asp-controller="Usuario" asp-action="Perfil" asp-route-id="@item.Usuario">
                            <div class="card" style="margin: 10px; display: inline-block;">
                                <div class="card-body">
                                    <h5 class="card-title">@Html.DisplayFor(modelItem => item.Nombre)</h5>
                                </div>
                            </div>
                        </a> 
                    }
                }
            </div>
        }

    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.menu-desplegable').forEach(button => {
            button.addEventListener('click', () => {
                const desplegado = button.nextElementSibling;
                desplegado.style.display = desplegado.style.display === 'flex' ? 'none' : 'flex';
            });
        });
        document.querySelector('.toggle-buscar-avanzado').addEventListener('click', function (e) {
            e.preventDefault();
            const buscarAvanzado = document.querySelector('.buscar-avanzado');
            buscarAvanzado.style.display = buscarAvanzado.style.display === 'none' || buscarAvanzado.style.display === '' ? 'flex' : 'none';
        });

        document.addEventListener("mousemove", (e) => {
            const circle = document.getElementById("mouse-circle");
            circle.style.transform = `translate(${e.pageX - 50}px, ${e.pageY - 50}px)`;
        });

        // Cola de canciones
        let songQueue = [];
        let isPlaying = false;

        // Obtener elementos clave
        const audioPlayer = document.getElementById('audioPlayer');
        const albumArt = document.getElementById('albumArt');
        const trackTitle = document.getElementById('trackTitle');
        const trackArtist = document.getElementById('trackArtist');
        const playPauseButton = document.getElementById('playPauseButton');
        const progress = document.getElementById('progress');
        const currentTimeEl = document.getElementById('currentTime');
        const durationEl = document.getElementById('duration');

        // Actualizar información del tiempo
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
            return `${minutes}:${secs}`;
        }

        function updateProgress() {
            const currentTime = audioPlayer.currentTime;
            const duration = audioPlayer.duration;

            progress.value = (currentTime / duration) * 100 || 0;
            currentTimeEl.textContent = formatTime(currentTime);
            durationEl.textContent = formatTime(duration);

            const value = progress.value;
            const max = progress.max;
            const percentage = (value / max) * 100;
            progress.style.setProperty('--progress', `${percentage}%`);
        }

        audioPlayer.addEventListener('timeupdate', updateProgress);
        audioPlayer.addEventListener('loadedmetadata', () => {
            const value = progress.value;
            const max = progress.max;
            const percentage = (value / max) * 100;
            progress.style.setProperty('--progress', `${percentage}%`);
            durationEl.textContent = formatTime(audioPlayer.duration);
        });

        // Función para reproducir una canción
        async function playSong(song) {
            console.log("Reproduciendo " + JSON.stringify(song))
            if (!song || !song.url) return;
            audioPlayer.src = song.url;
            audioPlayer.load();
            audioPlayer.play();
            playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
            isPlaying = true;

            const value = progress.value;
            const max = progress.max;
            const percentage = (value / max) * 100;
            progress.style.setProperty('--progress', `${percentage}%`);

            // Actualizar información de la canción
            albumArt.src = song.albumArt || 'https://via.placeholder.com/100';
            trackTitle.textContent = song.title || 'Título desconocido';
            trackArtist.textContent = song.artist || 'Artista desconocido';

            sessionStorage.setItem('currentSong', JSON.stringify(song));
            console.log(`Reproduciendo canción: ${song.title}`);

            // Llamar a la API para aumentar reproducciones
            if (song.id) {
                try {
                    const response = await fetch('/Cancion/AumentarReproducciones', {
                        method: 'POST',
                        body: new URLSearchParams({ 'id': song.id })
                    });

                    const data = await response.json();
                    if (data.success) {
                        console.log("Reproducción aumentada exitosamente.");
                    } else {
                        console.log("Error al aumentar las reproducciones.");
                    }
                } catch (error) {
                    console.error("Error en la llamada a la API:", error);
                }
            }
        }

        // Cambiar el progreso manualmente
        progress.addEventListener('input', () => {
            const seekTime = (progress.value / 100) * audioPlayer.duration;
            audioPlayer.currentTime = seekTime;
        });

        // Pausar/Reanudar reproducción
        playPauseButton.addEventListener('click', () => {
            if (isPlaying) {
                audioPlayer.pause();
                playPauseButton.innerHTML = `<i class="bi bi-play-fill"></i>`;
                sessionStorage.setItem('isPlaying', 'false');
            } else {
                audioPlayer.play();
                playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                sessionStorage.setItem('isPlaying', 'true');
            }
            isPlaying = !isPlaying;
        });

        // Reproducir la siguiente canción de la cola
        function playNextInQueue() {
            if (songQueue.length > 0) {
                const nextSong = songQueue.shift();
                sessionStorage.setItem('songQueue', JSON.stringify(songQueue)); // Actualizar cola en SessionStorage
                playSong(nextSong);
            } else {
                console.log('La cola está vacía.');
                isPlaying = false;
            }
        }

        // Función para agregar una canción a la cola
        function addToQueue(song) {
            songQueue.push(song);
            sessionStorage.setItem('songQueue', JSON.stringify(songQueue));
            console.log('Canción agregada a la cola:', song.title);
        }

        // Recuperar cola y canción actual al cargar la página
        window.addEventListener('load', () => {
            const storedQueue = sessionStorage.getItem('songQueue');
            if (storedQueue) {
                songQueue = JSON.parse(storedQueue);
                console.log('Cola recuperada:', songQueue);
            }

            const currentSong = sessionStorage.getItem('currentSong');
            if (currentSong) {
                playSong(JSON.parse(currentSong));
            }

            // Restaurar tiempo de la canción
            const storedTime = sessionStorage.getItem('currentTime');
            if (storedTime) {
                audioPlayer.currentTime = parseFloat(storedTime);
            }

            // Restaurar estado de reproducción
            const storedIsPlaying = sessionStorage.getItem('isPlaying');
            if (storedIsPlaying === 'true') {
                audioPlayer.play();
                playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                isPlaying = true;
            } else {
                audioPlayer.pause();
                playPauseButton.innerHTML = `<i class="bi bi-play-fill"></i>`;
                isPlaying = false;
            }
        });

        // Guardar tiempo de la canción al salir de la página
        window.addEventListener('beforeunload', () => {
            const currentTime = audioPlayer.currentTime;
            sessionStorage.setItem('currentTime', currentTime);
        });

        // Evento cuando una canción termina
        audioPlayer.addEventListener('ended', () => {
            console.log('Canción terminada.');
            playNextInQueue();
        });

        document.querySelectorAll('.play-button').forEach(a => {
            a.addEventListener('click', (e) => {
                e.preventDefault();
                console.log("Play Button Clicked!")
                const songId = a.getAttribute('data-id');
                const song = canciones.find(c => c.Id == songId);
                if (song) {
                    playSong({
                        id: song.Id,
                        url: song.Url,
                        albumArt: song.FotoPortada,
                        title: song.Titulo,
                        artist: song.AutorDisplay,
                    });
                } else {
                    console.error(`No se encontró la canción con ID ${songId}`);
                }
            });
        });

        document.querySelectorAll('.queue-button').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                console.log("Queue Button Clicked!")
                const songId = button.getAttribute('data-id');
                const song = canciones.find(c => c.Id == songId);
                if (song) {
                    addToQueue({
                        id: song.Id,
                        url: song.Url,
                        albumArt: song.FotoPortada,
                        title: song.Titulo,
                        artist: song.AutorDisplay,
                    });
                } else {
                    console.error(`No se encontró la canción con ID ${songId}`);
                }
            });
        });

        async function addtoPlaylist(event) {
            try {
                const songId = event.target.parentElement.querySelector('[data-song-id]').getAttribute('data-song-id');
                const response = await fetch('/Playlist/dameMisPlaylistJSON');

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                let playlists = await response.json();
                console.log(playlists, typeof (playlists));
                playlists = playlists.playlists;

                if (!Array.isArray(playlists)) {
                    throw new Error('Expected an array of playlists');
                }

                let playlistSelector = document.createElement('select');
                playlistSelector.innerHTML = playlists.map(playlist => `<option value="${playlist.Id}">${playlist.Titulo}</option>`).join('');

                let submitButton = document.createElement('button');
                submitButton.className = "button";
                submitButton.textContent = 'Agregar';
                submitButton.addEventListener('click', async function () {
                    const playlistId = playlistSelector.value;
                    console.log(songId, playlistId);
                    const addResponse = await fetch('/Playlist/AgregarCancionAPlaylist', {
                        method: 'POST',
                        body: new URLSearchParams({ 'cancionOID': songId, 'playlistOID': playlistId })
                    });

                    console.log("Canción agregada a la playlist exitosamente.");
                    submitButton.remove();
                    playlistSelector.remove();
                    desplegado.style.display = 'none';
                });
                event.target.parentElement.querySelectorAll('select, button').forEach(el => el.remove());
                event.target.parentElement.appendChild(playlistSelector);
                event.target.parentElement.appendChild(submitButton);
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function toggleFilters(select) {
            var filters = document.querySelectorAll('input[name="filter"]');
            if (select.value) {
                filters.forEach(function (filter) {
                    if (filter.value !== "canciones") {
                        filter.checked = false;
                        filter.disabled = true;
                    }
                });
            } else {
                filters.forEach(function (filter) {
                    filter.disabled = false;
                });
            }
        }
    </script>
}