@model ResultadoBusquedaViewModel

@{
    ViewData["Title"] = "Wavez | Resultados de Búsqueda";
}

<div class="text-center">
    <h1 class="display-4">Búsqueda</h1>

    <form asp-action="ResultadoBusqueda" method="get" style="display: flex; align-items: center; justify-content: center; gap: 10px;">
        <input type="text" name="query" placeholder="Buscar..." value="@Context.Request.Query["query"]"/>
        <div>
            <input type="checkbox" name="filter" value="canciones" @(Model.Filtros.Contains("canciones") ? "checked" : "") /> Canciones
            <input type="checkbox" name="filter" value="playlists" @(Model.Filtros.Contains("playlists") ? "checked" : "") /> Playlists
            <input type="checkbox" name="filter" value="usuarios" @(Model.Filtros.Contains("usuarios") ? "checked" : "") /> Usuarios
        </div>
        <div>
            <select name="genre" id="genre-selector" onchange="toggleFilters(this)">
                <option value="">Seleccione un género</option>
                @foreach (var genre in Model.Generos)
                {
                    <option value="@genre">@genre</option>
                }
            </select>
        </div>
        <button type="submit">Buscar</button>
    </form>

    <div class="resultados">
        <h2>Resultados de: @Context.Request.Query["query"]</h2>

        <!-- Mostrar canciones -->
        @if (Model.Filtros.Contains("canciones"))
        {
            <h3>Canciones</h3>
            <div class="estanteria-canciones">
                @if (!Model.Canciones.Any())
                {
                    <p>No hay canciones que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Canciones)
                    {
                        <div class="card">
                            <img class="card-img-top" src="@item.FotoPortada" style="width:200px; height:200px" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Titulo)</h5>
                                <p class="card-text"><strong>Género:</strong> @Html.DisplayFor(modelItem => item.Genero)</p>
                                <p class="card-text"><strong>Autor:</strong> @Html.DisplayFor(modelItem => item.Autor)</p>
                                <p class="card-text"><strong>Fecha de Lanzamiento:</strong> @Html.DisplayFor(modelItem => item.Fecha)</p>
                                <p class="card-text"><strong>Reproducciones:</strong> @Html.DisplayFor(modelItem => item.numReproducciones)</p>
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <!-- Mostrar playlists -->
        @if (Model.Filtros.Contains("playlists"))
        {
            <h3>Playlists</h3>
            <div class="estanteria-playlists">
                @if (!Model.Playlists.Any())
                {
                    <p>No hay playlists que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Playlists)
                    {
                        <div class="card">
                            <img class="card-img-top" src="@item.FotoPortada" style="width:200px; height:200px" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Titulo)</h5>
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <!-- Mostrar usuarios -->
        @if (Model.Filtros.Contains("usuarios"))
        {
            <h3>Usuarios</h3>
            <div class="estanteria-usuarios">
                @if (!Model.Usuarios.Any())
                {
                    <p>No hay usuarios que coincidan con tu búsqueda.</p>
                }
                else
                {
                    @foreach (var item in Model.Usuarios)
                    {
                        <a class="nav-link text-dark" asp-area="" asp-controller="Usuario" asp-action="Perfil" asp-route-id="@item.Usuario">
                            <div class="card" style="margin: 10px; display: inline-block;">
                                <div class="card-body">
                                    <h5 class="card-title">@Html.DisplayFor(modelItem => item.Nombre)</h5>
                                </div>
                            </div>
                        </a> 
                    }
                }
            </div>
        }

    </div>
</div>

@section Scripts {
    <script>

        document.addEventListener("mousemove", (e) => {
            const circle = document.getElementById("mouse-circle");
            circle.style.transform = `translate(${e.pageX - 50}px, ${e.pageY - 50}px)`;
        });

        function toggleFilters(select) {
            var filters = document.querySelectorAll('input[name="filter"]');
            if (select.value) {
                filters.forEach(function(filter) {
                    if (filter.value !== "canciones") {
                        filter.checked = false;
                        filter.disabled = true;
                    }
                });
            } else {
                filters.forEach(function(filter) {
                    filter.disabled = false;
                });
            }
        }
            let songQueue = [];
                let isPlaying = false;

                // Obtener elementos clave
                const audioPlayer = document.getElementById('audioPlayer');
                const albumArt = document.getElementById('albumArt');
                const trackTitle = document.getElementById('trackTitle');
                const trackArtist = document.getElementById('trackArtist');
                const playPauseButton = document.getElementById('playPauseButton');
                const progress = document.getElementById('progress');
                const currentTimeEl = document.getElementById('currentTime');
                const durationEl = document.getElementById('duration');

                // Actualizar información del tiempo
                function formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
                    return `${minutes}:${secs}`;
                }

                function updateProgress() {
                    const currentTime = audioPlayer.currentTime;
                    const duration = audioPlayer.duration;

                    progress.value = (currentTime / duration) * 100 || 0;
                    currentTimeEl.textContent = formatTime(currentTime);
                    durationEl.textContent = formatTime(duration);

                    const value = progress.value;
                    const max = progress.max;
                    const percentage = (value / max) * 100;
                    progress.style.setProperty('--progress', `${percentage}%`);
                }

                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('loadedmetadata', () => {

                    const value = progress.value;
                    const max = progress.max;
                    const percentage = (value / max) * 100;
                    progress.style.setProperty('--progress', `${percentage}%`);
                    durationEl.textContent = formatTime(audioPlayer.duration);
                });
                // Cambiar el progreso manualmente
                progress.addEventListener('input', () => {
                    const seekTime = (progress.value / 100) * audioPlayer.duration;
                    audioPlayer.currentTime = seekTime;
                });

                // Pausar/Reanudar reproducción
                playPauseButton.addEventListener('click', () => {
                    if (isPlaying) {
                        audioPlayer.pause();
                        playPauseButton.innerHTML = `<i class="bi bi-play-fill"></i>`;
                    } else {
                        audioPlayer.play();
                        playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                    }
                    isPlaying = !isPlaying;
                });

                // Reproducir la siguiente canción de la cola
                function playNextInQueue() {
                    if (songQueue.length > 0) {
                        const nextSong = songQueue.shift();
                        sessionStorage.setItem('songQueue', JSON.stringify(songQueue)); // Actualizar cola en SessionStorage
                        playSong(nextSong);
                    } else {
                        console.log('La cola está vacía.');
                        isPlaying = false;
                    }
                }
                    // Recuperar cola y canción actual al cargar la página
                    window.addEventListener('load', () => {
                        const storedQueue = sessionStorage.getItem('songQueue');
                        if (storedQueue) {
                            songQueue = JSON.parse(storedQueue);
                            console.log('Cola recuperada:', songQueue);
                        }

                        const currentSong = sessionStorage.getItem('currentSong');
                        if (currentSong) {
                            playSong(JSON.parse(currentSong));
                        }

                        // Restaurar tiempo de la canción
                        const storedTime = sessionStorage.getItem('currentTime');
                        if (storedTime) {
                            audioPlayer.currentTime = parseFloat(storedTime);
                        }
                    });

                    // Guardar tiempo de la canción al salir de la página
                    window.addEventListener('beforeunload', () => {
                        const currentTime = audioPlayer.currentTime;
                        sessionStorage.setItem('currentTime', currentTime);
                    });

                    // Evento cuando una canción termina
                    audioPlayer.addEventListener('ended', () => {
                        console.log('Canción terminada.');
                        playNextInQueue();
                    });

                    // Función para reproducir una canción
            async function playSong(song) {
                console.log("Reproduciendo " + JSON.stringify(song))
                if (!song || !song.url) return;
                audioPlayer.src = song.url;
                audioPlayer.load();
                audioPlayer.play();
                playPauseButton.innerHTML = `<i class="bi bi-pause-fill"></i>`;
                isPlaying = true;


                const value = progress.value;
                const max = progress.max;
                const percentage = (value / max) * 100;
                progress.style.setProperty('--progress', `${percentage}%`);


                // Actualizar información de la canción
                albumArt.src = song.albumArt || 'https://via.placeholder.com/100';
                trackTitle.textContent = song.title || 'Título desconocido';
                trackArtist.textContent = song.artist || 'Artista desconocido';

                sessionStorage.setItem('currentSong', JSON.stringify(song));
                console.log(`Reproduciendo canción: ${song.title}`);

                // Llamar a la API para aumentar reproducciones
                if (song.id) {
                    try {
                        const response = await fetch('/Cancion/AumentarReproducciones', {
                            method: 'POST',
                            body: new URLSearchParams({ 'id': song.id })
                        });

                        const data = await response.json();
                        if (data.success) {
                            console.log("Reproducción aumentada exitosamente.");
                        } else {
                            console.log("Error al aumentar las reproducciones.");
                        }
                    } catch (error) {
                        console.error("Error en la llamada a la API:", error);
                    }
                }
            }
    </script>
}